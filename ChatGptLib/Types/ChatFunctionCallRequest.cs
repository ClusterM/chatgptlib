using System.Text.Json.Serialization;

namespace wtf.cluster.ChatGptLib.Types
{
    /// <summary>
    /// The name and the arguments of the function that must be called, as generated by the model.
    /// </summary>
    public class ChatFunctionCallRequest
    {
        /// <summary>
        /// The name of the function.
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get; init; }

        /// <summary>
        /// Passed arguments as JSON string.
        /// Can be partial when using streaming, so do not parse it until the data has been fully received.
        /// </summary>
        [JsonPropertyName("arguments")]
        public string? Arguments { get; init; }

        /// <summary>
        /// The constructor for internal usage.
        /// </summary>
        /// <param name="name">The name of the function.</param>
        /// <param name="arguments">Passed arguments as JSON string.</param>
        [JsonConstructor]
        public ChatFunctionCallRequest(string? name, string? arguments)
        {
            Name = name;
            Arguments = arguments;
        }

        public static ChatFunctionCallRequest operator +(ChatFunctionCallRequest a, ChatFunctionCallRequest b)
        {
            var n = new ChatFunctionCallRequest(
                name: (a.Name == null && b.Name == null) ? null : ((a.Name ?? "") + (b.Name ?? "")),
                arguments: (a.Arguments == null && b.Arguments == null) ? null : ((a.Arguments ?? "") + (b.Arguments ?? ""))
            );
            return n;
        }

        public override string ToString() => $"{Name} - {Arguments}";
    }
}
